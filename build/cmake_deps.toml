# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
#
# Copyright 2024 Arm Limited and/or its affiliates.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

# Inherited by all other targets. When a key already exists, the elements of the
# target's value are appended to lists here.
[target_base]
excludes = [
  "^third-party",
  # Exclude the codegen templates, which are picked up because the buck targets
  # transitively depend on the generated_lib and not on the unwrapped set of
  # kernels.
  "^codegen/templates",
]

# ---------------------------------- core start ----------------------------------

[targets.executorch]
buck_targets = [
  "//runtime/executor:program",
]
deps = [
  "executorch_no_prim_ops",
]
filters = [
  ".cpp$",
]


[targets.executorch_no_prim_ops]
buck_targets = [
  "//runtime/executor:program_no_prim_ops",
]
deps = [
  "program_schema",
]
filters = [
  ".cpp$",
]


[targets.portable_kernels]
buck_targets = [
  # //kernels/portable:operators would be more appropriate, but buck2 doesn't
  # think it has any "inputs" since its srcs list is empty.
  "//kernels/portable:generated_lib",
]
filters = [
  ".cpp$",
]
deps = [
  "executorch",
]

[targets.optimized_kernels]
buck_targets = [
  "//kernels/optimized:generated_lib",
]
filters = [
  ".cpp$",
]
deps = [
  "executorch",
  "portable_kernels", # For kernels/portable/cpu/util/
]

[targets.quantized_kernels]
buck_targets = [
  "//kernels/quantized:generated_lib",
]
filters = [
  ".cpp$",
]
deps = [
  "executorch",
  "portable_kernels", # For kernels/portable/cpu/util/
]

[targets.program_schema]
buck_targets = [
  "//schema:program",
]
filters = [
  ".fbs$",
]

[targets.optimized_cpublas]
buck_targets = [
  "//kernels/optimized:libblas",
]
filters = [
  ".cpp$",
]
deps = [
  "executorch",
]

# ---------------------------------- core end ----------------------------------
# ---------------------------------- extension start ----------------------------------
[targets.extension_data_loader]
buck_targets = [
  "//extension/data_loader:buffer_data_loader",
  "//extension/data_loader:file_data_loader",
  "//extension/data_loader:mmap_data_loader",
  "//extension/data_loader:shared_ptr_data_loader",
]
filters = [
  ".cpp$",
]
deps = [
  "executorch",
]

[targets.extension_module]
buck_targets = [
  "//extension/module:module",
]
filters = [
  ".cpp$",
]
deps = [
  "executorch",
  "extension_data_loader",
]

[targets.extension_runner_util]
buck_targets = [
  "//extension/runner_util:inputs",
]
filters = [
  ".cpp$",
]
deps = [
  "executorch",
]

# ---------------------------------- extension end ----------------------------------
# ---------------------------------- binary start ----------------------------------

[targets.executor_runner]
buck_targets = [
  "//examples/portable/executor_runner:executor_runner",
]
filters = [
  ".cpp$",
]
deps = [
  "executorch",
  "portable_kernels",
  "quantized_kernels",
]

[targets.size_test]
buck_targets = [
  "//test:size_test",
]
filters = [
  ".cpp$",
]
deps = [
  "executorch",
]
# ---------------------------------- binary end ----------------------------------
# ---------------------------------- MPS start ----------------------------------
[targets.mps_executor_runner]
buck_targets = [
  "//examples/apple/mps/executor_runner:mps_executor_runner",
]
filters = [
  "(.mm|.cpp)$",
]
deps = [
  "executorch",
  "portable_kernels",
]

[targets.mps_backend]
buck_targets = [
  "//backends/apple/mps:mps",
]
filters = [
  "(.mm|.cpp)$",
]
deps = [
  "executorch",
]

[targets.mps_schema]
buck_targets = [
  "//backends/apple/mps:mps_schema",
]
filters = [
  ".fbs$",
]

# ---------------------------------- MPS end ----------------------------------
# ---------------------------------- XNNPACK start ----------------------------------

[targets.xnn_executor_runner]
buck_targets = [
  "//examples/xnnpack:xnn_executor_runner",
]
filters = [
  ".cpp$",
]
deps = [
  "executorch",
  "xnnpack_backend",
  "portable_kernels",
]

[targets.xnnpack_backend]
buck_targets = [
  "//backends/xnnpack:xnnpack_backend",
]
filters = [
  ".cpp$",
]
deps = [
  "executorch",
]

[targets.xnnpack_schema]
buck_targets = [
  "//backends/xnnpack/serialization:xnnpack_flatbuffer_header",
]
filters = [
  ".fbs$",
]
# ---------------------------------- XNNPACK end ----------------------------------
# ---------------------------------- Vulkan start ---------------------------------
[targets.vulkan_schema]
buck_targets = [
  "//backends/vulkan:vk_delegate_schema",
]
filters = [
  ".fbs$",
]
# ---------------------------------- Vulkan end -----------------------------------
# ---------------------------------- LLama start ----------------------------------
[targets.custom_ops]
buck_targets = [
  "//examples/models/llama2/custom_ops:custom_ops",
]
filters = [
  ".cpp$",
]
deps = [
  "executorch",
  "optimized_kernels",
  "xnnpack_backend",
]

[targets.llama_runner]
buck_targets = [
  "//examples/models/llama2/runner:runner",
]
filters = [
  ".cpp$",
]
deps = [
  "custom_ops",
  "executorch",
  "extension_data_loader",
  "extension_module",
  "portable_kernels",
  "quantized_kernels",
  "xnnpack_backend",
]
# ---------------------------------- LLama end ----------------------------------
